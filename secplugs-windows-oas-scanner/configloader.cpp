#include "configloader.h"
#define  _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING

namespace secplugs {
    configloader::configloader(std::string file) {
        config_file = std::move(file);
        load_config(config_file);
    }

    /**
     *
     * @param file the config file in JSON format
     *
     * This expects the config file to have the following properties
     * api_key - The customer's API key. This would be available when the customer
     *           subscribes to our services
     *  base_url - Optional, defaults to api.live.secplugs.com. Used for testing purposes only
     *  watchers - The list of directories to watch
     *
     *  This method parses the JSON file and sets up the necessary config attributes. This is
     *  a basic version and can be more enhanced/autogenerated.
     */
    void configloader::load_config(std::string file) {
        if (std::experimental::filesystem::exists(file)) {
            config_file = std::move(file);
            std::fstream ifs(config_file, std::ios::in);
            Poco::JSON::Parser parser;
            Poco::Dynamic::Var tmp = parser.parse(ifs);
            Poco::JSON::Object::Ptr json = tmp.extract<Poco::JSON::Object::Ptr>();
            if (json->has("api_key")) {
                api_key = json->getValue<std::string>("api_key");
            }
            else {
                api_key = DEFAULT_API_KEY;
            }
            if (json->has("base_url")) {
                base_url = json->getValue<std::string>("base_url");
            }
            else {
                base_url = SECPLUGS_API_URL;
            }
            if (json->has("cert")) {
                client_cert = json->getValue<std::string>("cert");
            }
            if (json->has("watchers")) {
                Poco::JSON::Array::Ptr array_ptr = json->getArray("watchers");
                for (auto i = array_ptr->begin(); i != array_ptr->end(); ++i) {
                    watchers.push_back(i->convert<std::string>());
                }
            }
            if (json->has("proxy")) {
                Poco::JSON::Object::Ptr optr = json->getObject("proxy");
                if (optr->has("host") && optr->has("port")) {
                    proxy.insert(stringpair_t("proxyhost", optr->getValue<std::string>("host")));
                    proxy.insert(stringpair_t("proxyport", optr->getValue<std::string>("port")));
                    if (optr->has("username") && optr->has("password")) {
                        proxy.insert(stringpair_t("proxyyser", optr->getValue<std::string>("username")));
                        proxy.insert(stringpair_t("proxypassword", optr->getValue<std::string>("password")));
                    }
                }
            }
        }
        else {
            std::cout << file << " does not exit" << '\n';
        }
    }
}